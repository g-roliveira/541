- name: Remove swap do arquivo /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
  - swap
  - none

- name: Desativa o swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Encaminhando o IPv4 e permitindo que o iptables veja o tráfego em ponte
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: '{{ item }}'
    state: present
    create: yes
  with_items:
  - 'overlay'
  - 'br_netfilter'

- name: modprobe
  command: '{{ item }}'
  with_items:
  - 'modprobe br_netfilter'
  - 'modprobe overlay'

- name: Encaminhando o IPv4 e permitindo que o iptables veja o tráfego em ponte
  lineinfile:
    path: /etc/sysctl.d/k8s.conf
    line: '{{ item }}'
    state: present
    create: yes
  with_items:
  - 'net.bridge.bridge-nf-call-iptables   = 1'
  - 'net.bridge.bridge-nf-call-ip6tables  = 1'
  - 'net.ipv4.ip_forward                  = 1'

- name: update sysctl
  command: sysctl --system

- name: Adiciona uma chave de assinatura apt para o Docker
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Adiciona repositorio apt para versao estavel
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
    state: present

- name: Instalando o containerd runtime e suas dependencias
  apt:
    name: containerd.io
    state: present
    update_cache: yes
  notify: restart containerd
- meta: flush_handlers

- name: Configurando containerd default.
  shell: |
    containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
  args:
    executable: bash

- name: Configurando containerd systemd para cgroup.
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: "SystemdCgroup = false"
    line: "            SystemdCgroup = true"
  notify: restart containerd
- meta: flush_handlers

- name: Configurando containerd config_path registrys
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: 'config_path = ""'
    line: '      config_path = "/etc/containerd/certs.d"'
  notify: restart containerd
- meta: flush_handlers

- name: Criando diretorio do registry e certificados
  file:
    path: "/etc/containerd/certs.d/registry:5000"
    state: directory
    mode: '0755'

- name: Copia arquivos do registry para os nós do cluster
  copy:
    src: "files/{{ item.src }}"
    dest: "/etc/containerd/certs.d/registry:5000/{{ item.dest }}"
    mode: '0644'
  with_items:
    - { src: 'ca.crt', dest: 'ca.crt' }
    - { src: 'registry.crt', dest: 'client.crt' }
    - { src: 'registry.key', dest: 'client.key' }

- name: Configure hosts.toml do registry
  blockinfile:
    path: "/etc/containerd/certs.d/registry:5000/hosts.toml"
    create: yes
    block: |
      server = "https://registry:5000"

      [host]
        capabilities = ["pull", "resolve", "push"]

      [client]
        crt = "/etc/containerd/certs.d/registry:5000/client.crt"
        key = "/etc/containerd/certs.d/registry:5000/client.key"

      [ca]
        crt = "/etc/containerd/certs.d/registry:5000/ca.crt"
  notify: restart containerd
- meta: flush_handlers
              
- name: Garantindo /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: "{{ item }}"
  with_items:
  - 172.16.1.100 kube-master
  - 172.16.1.101 kube-node1
  - 172.16.1.102 kube-node2
  - 172.16.1.103 registry

- name: Adiciona usuario suporte
  user:
    name: suporte
    shell: /bin/bash
    password: $1$QbUARykG$p2nthVG8AkDvabKPHwboa1

- name: Adicionar suporte ao grupo sudo
  lineinfile:
    dest: /etc/sudoers
    line: 'suporte ALL=(ALL:ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'
  notify: Reiniciar o servico sshd
- meta: flush_handlers

- name: Instala pacotes que permitem que o apt seja usado sobre HTTPS
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg-agent
    - software-properties-common
    - mysql-client
    - nfs-common
    - snapd
    - git
    - vim
    - nano

- name: Remove o diretório se ele já existir
  file:
    path: /home/suporte/4541
    state: absent

- name: Clona repositorio com os arquivos do curso para a HOME do usuario suporte
  shell: sudo -u suporte git clone https://github.com/4linux/4541.git /home/suporte/4541
  args:
    executable: /bin/bash

- name: Cria o diretório .ssh
  file:
    path: /home/suporte/.ssh
    state: directory
    owner: suporte
    group: suporte
    mode: '0755'

- name: Criando o arquivo id_rsa
  copy:
    src: files/id_rsa
    dest: /home/suporte/.ssh/id_rsa
    owner: suporte
    group: suporte
    mode: 0600

- name: Criando o arquivo id_rsa.pub
  copy:
    src: files/id_rsa.pub
    dest: /home/suporte/.ssh/id_rsa.pub
    owner: suporte
    group: suporte
    mode: 0644

- name: Adiciona uma chave de assinatura apt para o Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adiciona repositorio apt para Kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list

- name: Instala os pacotes do Kubernetes
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - kubelet=1.25.10-00
    - kubeadm=1.25.10-00
    - kubectl=1.25.10-00

- name: Reinicia o kubelet
  service:
    name: kubelet
    daemon_reload: yes
    state: restarted
