- name: Remove swap do arquivo /etc/fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  with_items:
  - swap
  - none

- name: Desativa o swap
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: Encaminhando o IPv4 e permitindo que o iptables veja o tráfego em ponte
  lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: '{{ item }}'
    state: present
    create: yes
  with_items:
  - 'overlay'
  - 'br_netfilter'

- name: modprobe
  command: '{{ item }}'
  with_items:
  - 'modprobe br_netfilter'
  - 'modprobe overlay'

- name: Encaminhando o IPv4 e permitindo que o iptables veja o tráfego em ponte
  lineinfile:
    path: /etc/sysctl.d/k8s.conf
    line: '{{ item }}'
    state: present
    create: yes
  with_items:
  - 'net.bridge.bridge-nf-call-iptables   = 1'
  - 'net.bridge.bridge-nf-call-ip6tables  = 1'
  - 'net.ipv4.ip_forward                  = 1'

- name: update sysctl
  command: sysctl --system

- name: Adiciona uma chave de assinatura apt para o Docker
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Adiciona repositorio apt para versao estavel
  apt_repository:
    repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable
    state: present

- name: Garantindo /etc/hosts
  lineinfile:
    path: /etc/hosts
    line: "{{ item }}"
  with_items:
    - 172.16.1.100 kube-master
    - 172.16.1.101 kube-node1
    - 172.16.1.102 kube-node2
    - 172.16.1.103 registry

- name: Adiciona usuario suporte
  user:
    name: suporte
    shell: /bin/bash
    password : $1$QbUARykG$p2nthVG8AkDvabKPHwboa1

- name: Adicionar suporte ao grupo sudo
  lineinfile:
    dest: /etc/sudoers
    line: 'suporte ALL=(ALL:ALL) NOPASSWD: ALL'
    validate: 'visudo -cf %s'

- name: Reiniciar o servico sshd
  service:
    name: sshd
    state: restarted
    
- name: Instala pacotes que permitem que o apt seja usado sobre HTTPS
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - gnupg-agent
    - software-properties-common
    - mysql-client
    - nfs-common
    - snapd
    - git
    - vim
    - nano

- name: Remove o diretório se ele já existir
  file:
    path: /home/suporte/4541
    state: absent

- name: Clona repositorio com os arquivos do curso para a HOME do usuario suporte
  shell: sudo -u suporte git clone https://github.com/4linux/4541.git /home/suporte/4541
  args:
    executable: /bin/bash

- name: Cria o diretório .ssh
  file:
    path: /home/suporte/.ssh
    state: directory
    owner: suporte
    group: suporte
    mode: '0755'
    
- name: Criando o arquivo id_rsa
  copy:
    src: files/id_rsa
    dest: /home/suporte/.ssh/id_rsa
    owner: suporte
    group: suporte
    mode: 0600
    
- name: Criando o arquivo id_rsa.pub
  copy:
    src: files/id_rsa.pub
    dest: /home/suporte/.ssh/id_rsa.pub
    owner: suporte
    group: suporte
    mode: 0644     

- name: Instala o Docker e suas dependencias
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - docker-ce
    - docker-ce-cli
    - containerd.io
  notify:
    - docker status

- name: Adiciona o usuario suporte no grupo docker
  user:
    name: suporte
    group: docker

- name: Cria o diretório registry:5000
  file:
    path: /etc/docker/certs.d/registry:5000
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Criando o arquivo ca.crt
  copy:
    src: files/ca.crt
    dest: /etc/docker/certs.d/registry:5000
    owner: suporte
    group: suporte
    mode: '0644'
    
- name: Criando o arquivo daemon.json
  copy:
    src: files/daemon.json
    dest: /etc/docker/
    owner: root
    group: root
    mode: '0644'

- name: Cria o diretorio docker.service.d
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    owner: root
    group: root
    mode: '0755'
    
- name: Reinicia o Docker
  service:
    name: docker
    daemon_reload: yes
    state: restarted

- name: Download cri-dockerd tarball
  get_url:
    url: https://github.com/Mirantis/cri-dockerd/releases/download/v0.2.5/cri-dockerd-0.2.5.amd64.tgz
    dest: /tmp/cri-dockerd-0.2.5.amd64.tgz

- name: Extract cri-dockerd tarball
  ansible.builtin.unarchive:
    src: /tmp/cri-dockerd-0.2.5.amd64.tgz
    dest: /tmp/
    remote_src: yes
    extra_opts: --strip-components=1

- name: Create /usr/local/bin directory
  file:
    path: /usr/local/bin
    state: directory

- name: Install cri-dockerd binary
  command: mv /tmp/cri-dockerd /usr/local/bin/cri-dockerd

- name: Criar arquivo cri-docker.service
  blockinfile:
    dest: /etc/systemd/system/cri-docker.service
    block: |
      [Unit]
      Description=CRI Interface for Docker Application Container Engine
      Documentation=https://docs.mirantis.com
      After=network-online.target firewalld.service docker.service
      Wants=network-online.target
      Requires=cri-docker.socket
      [Service]
      Type=notify
      ExecStart=/usr/local/bin/cri-dockerd --container-runtime-endpoint fd:// --network-plugin=
      ExecReload=/bin/kill -s HUP $MAINPID
      TimeoutSec=0
      RestartSec=2
      Restart=always
      StartLimitBurst=3
      StartLimitInterval=60s
      LimitNOFILE=infinity
      LimitNPROC=infinity
      LimitCORE=infinity
      TasksMax=infinity
      Delegate=yes
      KillMode=process
      [Install]
      WantedBy=multi-user.target
    create: yes

- name: Criar arquivo cri-docker.socket
  blockinfile:
    dest: /etc/systemd/system/cri-docker.socket
    block: |
      [Unit]
      Description=CRI Docker Socket for the API
      PartOf=cri-docker.service
      [Socket]
      ListenStream=%t/cri-dockerd.sock
      SocketMode=0660
      SocketUser=root
      SocketGroup=docker
      [Install]
      WantedBy=sockets.target
    create: yes

- name: Daemon reload
  command: systemctl daemon-reload

- name: Habilitar e iniciar o socket cri-docker
  service:
    name: cri-docker.socket
    enabled: true
    state: started

- name: Configurar sysctl para Kubernetes CRI
  blockinfile:
    dest: /etc/sysctl.d/99-kubernetes-cri.conf
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1
      net.bridge.bridge-nf-call-ip6tables = 1
    create: yes

- name: Aplicar parâmetros sysctl sem reiniciar
  command: sysctl --system

- name: Adiciona uma chave de assinatura apt para o Kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Adiciona repositorio apt para Kubernetes
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list

- name: Instala os pacotes do Kubernetes
  apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes
  vars:
    packages:
    - kubelet=1.25.10-00
    - kubeadm=1.25.10-00
    - kubectl=1.25.10-00

- name: Reinicia o kubelet
  service:
    name: kubelet
    daemon_reload: yes
    state: restarted    