---
- hosts: all
  become: yes
  become_user: root
  become_method: sudo
  tasks:
    - name: Executa Tarefas Communs nos nós do Kubernetes
      ansible.builtin.include_tasks:
        common-tasks.yaml    

    - name: Add Variaveis para Versão recente do etcdclient
      set_fact:
        etcd_ver: v3.4.26
        google_url: https://storage.googleapis.com/etcd
        github_url: https://github.com/etcd-io/etcd/releases/download
        etcd_tmp_dir: /tmp/etcd-download-test
        ubuntu_binary_dir: /usr/local/bin

    - name: Remove arquivos existentes do etcd
      file:
        path: "/tmp/etcd-{{ etcd_ver }}-linux-amd64.tar.gz"
        state: absent

    - name: Criando diretorio temporario para o etcd 
      file:
        path: "{{ etcd_tmp_dir }}"
        state: directory
        recurse: yes

    - name: Download binarios etcd
      get_url:
        url: "{{ google_url }}/{{ etcd_ver }}/etcd-{{ etcd_ver }}-linux-amd64.tar.gz"
        dest: "/tmp/etcd-{{ etcd_ver }}-linux-amd64.tar.gz"

    - name: Extraindo binarios etcd
      ansible.builtin.unarchive:
        src: "/tmp/etcd-{{ etcd_ver }}-linux-amd64.tar.gz"
        dest: /tmp/etcd-download-test
        remote_src: yes
        extra_opts: --strip-components=1

    - name: Remove arquivos do etcd
      file:
        path: "/tmp/etcd-{{ etcd_ver }}-linux-amd64.tar.gz"
        state: absent

    - name: Copia binarios etcd
      copy:
        src: "{{ etcd_tmp_dir }}/etcd"
        dest: "{{ ubuntu_binary_dir }}/etcd"
        mode: "0755"

    - name: Copia binarios etcdctl
      copy:
        src: "{{ etcd_tmp_dir }}/etcdctl"
        dest: "{{ ubuntu_binary_dir }}/etcdctl"
        mode: "0755"

    - name: Inicializa o cluster Kubernetes atraves da ferramenta kubeadm
      shell: kubeadm init --apiserver-advertise-address="172.16.1.100" --apiserver-cert-extra-sans="172.16.1.100" --node-name kube-master --pod-network-cidr=192.168.0.0/16 --kubernetes-version=1.25.10 --cri-socket unix:///var/run/cri-dockerd.sock --ignore-preflight-errors=all > /opt/init_cluster
      args:
        creates: /opt/init_cluster
        
    - name: Cria o diretório .kube para o usuário vagrant
      file:
        path: /home/vagrant/.kube
        state: directory
        mode: '0755'

    - name: Configura o kubeconfig para o usuario vagrant
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/vagrant/.kube/config
        remote_src: yes

    - name: Definir permissao de acesso ao arquivo config
      file:
        path: /home/vagrant/.kube/config
        owner: vagrant
        group: vagrant
        mode: '0644'

    - name: Cria o diretório .kube para o usuário suporte
      file:
        path: /home/suporte/.kube
        state: directory
        owner: suporte
        group: suporte
        mode: '0755'

    - name: Configura o kubeconfig para o usuario suporte
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/suporte/.kube/config
        remote_src: yes

    - name: Definir permissao de acesso ao arquivo config
      file:
        path: /home/suporte/.kube/config
        owner: suporte
        group: suporte
        mode: '0644'

    - name: Instala a rede calico no cluster
      become: false
      command: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.0/manifests/calico.yaml

    - name: Gera o comando para o join de novos nodes
      command: kubeadm token create --print-join-command
      register: join_command

    - name: Concatenate cri-socket argument to join command
      set_fact:
        join_command_with_cri_socket: "{{ join_command.stdout_lines[0] }} --cri-socket unix:///var/run/cri-dockerd.sock --ignore-preflight-errors=all"

    - name: Copia o comando do join no arquivo local
      local_action: copy content="{{ join_command_with_cri_socket }}" dest="./join-command"

  handlers:
    - name: docker status
      service: name=docker state=started
